const listModule = require('./listModule');
const cardModule = require('./cardModule');
const tagModule = require('./tagModule');
const utilsModule = require('./utilsModule');

const app = {
  base_url: 'http://localhost:5050',

  // init function, launched upon page load
  init: async function () {
    console.log('app.init !');

    // we dispatch the base_url info to the modules which need it
    listModule.setBaseUrl(app.base_url);
    cardModule.setBaseUrl(app.base_url);
    tagModule.setBaseUrl(app.base_url);

    // upon page load, we want to get the existsing lists in DB
    // we declared the init method as async: we can wait for the getListsFromAPI function to finish before running the next instructions
    await app.getListsFromAPI();
    await tagModule.getTagsFromAPI();
    // adding method that hooks event listeners
    app.addListenerToActions();
  },

  addListenerToActions: () => {
    // on the add list button, we add an event listener to open the modal
    const button = document.getElementById('addListButton');
    button.addEventListener('click', listModule.showAddListModal);

    // on the add tag button, we add an event listener to open the add tag modal
    const addTagButton = document.getElementById('addTagButton');
    addTagButton.addEventListener('click', tagModule.showAddTagForm);

    // we target the close and X buttons and the modal background to add an event listerner to them, which will close the modal
    const closeElements = document.querySelectorAll('.close, .modal-close, .modal-background');
    for (const closeElement of closeElements) {
      closeElement.addEventListener('click', utilsModule.hideModals);
    }

    // we target the add list form modal 
    const form = document.querySelector('#addListModal form');
    form.addEventListener('submit', app.handleAddListForm);

    // we target the add card form modal
    const cardForm = document.querySelector('#addCardModal form');
    cardForm.addEventListener('submit', app.handleAddCardForm);

    // we capture the submit event generated by the add tag form
    const addTagForm = document.querySelector('#addTagModal form');
    addTagForm.addEventListener('submit', tagModule.handleAddTagForm);

    // we capture the submit event generated by the associate tag form
    const aassociateTagForm = document.querySelector('#associateTagModal form');
    aassociateTagForm.addEventListener('submit', tagModule.handleAssociateLabelForm);

  },


  handleAddListForm: event => {
    // to make sure listModule doesn't have to refer to app in its code, we leave the declaration fo the method in app
    // we delegate the list-specific processing to the module and we clode the modals form app 
    listModule.handleAddListForm(event);
    utilsModule.hideModals();
  },

  handleAddCardForm: event => {
    cardModule.handleAddCardForm(event);
    utilsModule.hideModals();
  },
  getListsFromAPI: async () => {
    try {
      const result = await fetch(`${app.base_url}/lists`);
      if (result.ok) {

        const listArray = await result.json();
        // with fetch, we get an array of list objects
        // To create the lists in the DOM, we loop on this array and, for each element, we call the makeListInDOM method

        for (const list of listArray) {
          listModule.makeListInDOM(list);
          // for each element of the lists array, we use the cards property which contains a cards array for this list
          // we loop on this array and, for each element, we call the makeCardInDOM method
          for (const card of list.cards) {
            cardModule.makeCardInDOM(card);
            // if we have elements in the tags property of the card, we loop through the array to create an element per tag
            if (card.tags) {
              for (const tag of card.tags) {
                tagModule.makeTagInDOM(tag, card.id);
              }
            }
          }
        }
      } else {
        console.error('PÃ©pin au niveau du serveur');
      }

      // we call SortableJS to implement the drag-and-drop
      // here we delcare the list container as a place where elements can be dragged
      // the elements to be dragged (individual lists) are specified in the 'draggable' property
      // when the element dragging ends, we trigger the listModule.handleDropList method
      let container = document.querySelector('.card-lists');
      new Sortable(container, {
        group: "project",
        draggable: ".list-item",
        onEnd: listModule.handleDropList
      });

    } catch (error) {
      console.error('Impossible de charger les listes depuis l\'API', error);
    }
  }
}

// we hook an event listener on the document: when the loading is done, app.init is launched
document.addEventListener('DOMContentLoaded', app.init);

module.exports = app;